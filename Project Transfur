-- Cyberpunk Finder GUI (LocalScript)
-- Additions:
--  - Horizontal scrolling tab bar
--  - New "Theme" tab with RGB/HSV color picker
--  - Theme manager updates accents across the whole UI in real-time
--  - Existing tabs: Items, Ammo, Interactables, Loot (with keyword search)
--  - Toggle key: K

local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local pg = player:WaitForChild("PlayerGui")

-- Clean re-run
local existing = pg:FindFirstChild("CyberFinderGui")
if existing then existing:Destroy() end

-- THEME (base)
local Colors = {
	bg = Color3.fromRGB(9,12,20),
	panel = Color3.fromRGB(18,22,36),
	panelDark = Color3.fromRGB(14,18,30),
	accent = Color3.fromRGB(0,255,170),      -- primary neon
	accent2 = Color3.fromRGB(255,210,0),     -- secondary neon
	text = Color3.fromRGB(230, 255, 255),
	textDim = Color3.fromRGB(160, 195, 195),
}
local DefaultColors = {}
for k,v in pairs(Colors) do DefaultColors[k] = v end

-- Theme manager: gather elements to recolor dynamically
local Theme = {
	refs = {
		strokes = {},
		scrollbars = {},
		underlines = {},
		accentTexts = {},
		accentFrames = {},
	},
}
function Theme.registerStroke(stroke) table.insert(Theme.refs.strokes, stroke) end
function Theme.registerScrollbar(sf) table.insert(Theme.refs.scrollbars, sf) end
function Theme.registerUnderline(frame) table.insert(Theme.refs.underlines, frame) end
function Theme.registerAccentText(lbl) table.insert(Theme.refs.accentTexts, lbl) end
function Theme.registerAccentFrame(fr) table.insert(Theme.refs.accentFrames, fr) end

function Theme.apply()
	for _, s in ipairs(Theme.refs.strokes) do
		if s and s.Parent then s.Color = Colors.accent end
	end
	for _, sf in ipairs(Theme.refs.scrollbars) do
		if sf and sf.Parent then sf.ScrollBarImageColor3 = Colors.accent2 end
	end
	for _, ul in ipairs(Theme.refs.underlines) do
		if ul and ul.Parent then ul.BackgroundColor3 = Colors.accent2 end
	end
	for _, t in ipairs(Theme.refs.accentTexts) do
		if t and t.Parent then t.TextColor3 = Colors.accent2 end
	end
	for _, f in ipairs(Theme.refs.accentFrames) do
		if f and f.Parent then f.BackgroundColor3 = Colors.accent2 end
	end
end

function Theme.setPrimary(color)
	-- One picker controls both neon accents by default
	Colors.accent = color
	Colors.accent2 = color
	Theme.apply()
end

function Theme.reset()
	Colors.accent = DefaultColors.accent
	Colors.accent2 = DefaultColors.accent2
	Theme.apply()
end

-- Helpers
local function make(instance, props, children)
	for k, v in pairs(props or {}) do instance[k] = v end
	for _, child in ipairs(children or {}) do child.Parent = instance end
	return instance
end

local function neonStroke(parent, color, thickness)
	local s = make(Instance.new("UIStroke"), {
		Color = color or Colors.accent,
		Thickness = thickness or 2,
		Transparency = 0.15,
		ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
		LineJoinMode = Enum.LineJoinMode.Round,
		Parent = parent
	})
	Theme.registerStroke(s)
	return s
end

local function corner(parent, r)
	return make(Instance.new("UICorner"), { CornerRadius = UDim.new(0, r or 8), Parent = parent })
end

local function vPadding(parent, px)
	local pad = Instance.new("UIPadding")
	pad.PaddingTop = UDim.new(0, px)
	pad.PaddingBottom = UDim.new(0, px)
	pad.PaddingLeft = UDim.new(0, px)
	pad.PaddingRight = UDim.new(0, px)
	pad.Parent = parent
	return pad
end

local function autoScrollY(scroller)
	local layout = Instance.new("UIListLayout")
	layout.Padding = UDim.new(0, 6)
	layout.SortOrder = Enum.SortOrder.LayoutOrder
	layout.Parent = scroller
	local function update()
		scroller.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 10)
	end
	layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(update)
	update()
	return layout
end

local function autoScrollX(scroller, layout)
	local function update()
		scroller.CanvasSize = UDim2.new(0, layout.AbsoluteContentSize.X + 10, 0, 0)
	end
	layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(update)
	update()
end

-- Keyword search utils
local function buildSearchString(instance)
	local parts = {}
	table.insert(parts, instance.Name)
	table.insert(parts, instance.ClassName)
	local p = instance.Parent
	local hops = 0
	while p and hops < 4 do
		table.insert(parts, p.Name)
		p = p.Parent
		hops += 1
	end
	return string.lower(table.concat(parts, " "))
end
local function parseKeywordGroups(query)
	local groups = {}
	if not query or query == "" then return groups end
	query = string.lower(query)
	query = query:gsub("[^%w%|%,%-%_%s]", " ")
	for token in string.gmatch(query, "%S+") do
		local alts = {}
		for alt in string.gmatch(token, "[^|,]+") do
			if alt ~= "" then table.insert(alts, alt) end
		end
		if #alts > 0 then table.insert(groups, alts) end
	end
	return groups
end
local function matchesKeywords(instance, query)
	local groups = parseKeywordGroups(query)
	if #groups == 0 then return true end
	local text = buildSearchString(instance)
	for _, alts in ipairs(groups) do
		local found = false
		for _, alt in ipairs(alts) do
			if string.find(text, alt, 1, true) then found = true break end
		end
		if not found then return false end
	end
	return true
end

-- Teleport utility
local function teleportTo(target)
	if not target or not target.Parent then return end
	local char = player.Character or player.CharacterAdded:Wait()
	local hrp = char:FindFirstChild("HumanoidRootPart") or char:WaitForChild("HumanoidRootPart")
	if not hrp then return end

	local cf
	if target:IsA("Model") then
		cf = target:GetPivot()
	elseif target:IsA("BasePart") then
		cf = target.CFrame
	else
		return
	end
	local offset = Vector3.new(0, 4, 0)
	hrp.CFrame = CFrame.new((cf.Position + offset), cf.Position + cf.LookVector * 10)
end

-- GUI ROOT
local gui = make(Instance.new("ScreenGui"), {
	Name = "CyberFinderGui",
	ResetOnSpawn = false,
	IgnoreGuiInset = true,
	ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
	Parent = pg
})

-- Main window
local main = make(Instance.new("Frame"), {
	Name = "Main",
	Size = UDim2.fromScale(0.42, 0.52),
	Position = UDim2.fromScale(0.5, 0.52),
	AnchorPoint = Vector2.new(0.5, 0.5),
	BackgroundColor3 = Colors.panel,
	BorderSizePixel = 0,
	Active = true,
	Parent = gui
})
corner(main, 10); neonStroke(main, Colors.accent, 2)

-- Accent rim
local rimTop = make(Instance.new("Frame"), {
	Size = UDim2.new(1, 0, 0, 3),
	BackgroundColor3 = Colors.accent2,
	BackgroundTransparency = 0.2,
	Parent = main
})
Theme.registerAccentFrame(rimTop)

-- Title bar
local titleBar = make(Instance.new("Frame"), {
	Name = "TitleBar",
	Size = UDim2.new(1, 0, 0, 34),
	BackgroundColor3 = Colors.panelDark,
	BorderSizePixel = 0,
	Parent = main
})
corner(titleBar, 10); neonStroke(titleBar, Colors.accent, 1)
vPadding(titleBar, 6)

make(Instance.new("TextLabel"), {
	Size = UDim2.new(1, -80, 1, 0),
	Position = UDim2.fromOffset(12, 0),
	BackgroundTransparency = 1,
	Font = Enum.Font.GothamBold,
	Text = "CYBER SCANNER",
	TextColor3 = Colors.text,
	TextSize = 18,
	TextXAlignment = Enum.TextXAlignment.Left,
	Parent = titleBar
})

make(Instance.new("TextLabel"), {
	Size = UDim2.new(0, 120, 1, 0),
	Position = UDim2.new(1, -126, 0, 0),
	BackgroundTransparency = 1,
	Font = Enum.Font.GothamSemibold,
	Text = "[K] Toggle",
	TextColor3 = Colors.textDim,
	TextScaled = true,
	TextXAlignment = Enum.TextXAlignment.Right,
	Parent = titleBar
})

-- Tab bar (horizontal scroller)
local tabBar = make(Instance.new("ScrollingFrame"), {
	Name = "TabBar",
	Size = UDim2.new(1, -16, 0, 42),
	Position = UDim2.new(0, 8, 0, 38),
	BackgroundColor3 = Colors.panelDark,
	BorderSizePixel = 0,
	ScrollBarThickness = 6,
	ScrollingDirection = Enum.ScrollingDirection.X,
	BottomImage = "rbxassetid://0", -- hide default arrows
	MidImage = "rbxassetid://0",
	TopImage = "rbxassetid://0",
	Parent = main
})
corner(tabBar, 8); neonStroke(tabBar, Colors.accent, 1)
vPadding(tabBar, 4)
Theme.registerScrollbar(tabBar)

local tabLayout = Instance.new("UIListLayout")
tabLayout.FillDirection = Enum.FillDirection.Horizontal
tabLayout.Padding = UDim.new(0, 6)
tabLayout.Parent = tabBar
autoScrollX(tabBar, tabLayout)

local function makeTabButton(text)
	local btn = Instance.new("TextButton")
	btn.Name = text .. "Tab"
	btn.Size = UDim2.new(0, 120, 1, -8)
	btn.BackgroundColor3 = Colors.panel
	btn.AutoButtonColor = false
	btn.Text = text:upper()
	btn.Font = Enum.Font.GothamBold
	btn.TextSize = 14
	btn.TextColor3 = Colors.textDim
	btn.BorderSizePixel = 0
	btn.Parent = tabBar
	corner(btn, 6)
	neonStroke(btn, Colors.accent, 1)

	local underline = Instance.new("Frame")
	underline.Name = "Underline"
	underline.Size = UDim2.new(1, 0, 0, 2)
	underline.Position = UDim2.new(0, 0, 1, -2)
	underline.BackgroundColor3 = Colors.accent2
	underline.BackgroundTransparency = 0.5
	underline.Visible = false
	underline.Parent = btn
	Theme.registerUnderline(underline)

	return btn
end

local itemsTab = makeTabButton("Items")
local ammoTab = makeTabButton("Ammo")
local interactTab = makeTabButton("Interactables")
local lootTab = makeTabButton("Loot")
local themeTab = makeTabButton("Theme")

-- Content region
local content = make(Instance.new("Frame"), {
	Name = "Content",
	Size = UDim2.new(1, -16, 1, -42 - 46 - 16),
	Position = UDim2.new(0, 8, 0, 38 + 46),
	BackgroundColor3 = Colors.panelDark,
	BorderSizePixel = 0,
	Parent = main
})
corner(content, 10); neonStroke(content, Colors.accent, 1)
vPadding(content, 8)

-- Search + Page factory
local function makeSearchPage(placeholderText)
	local page = Instance.new("Frame")
	page.BackgroundTransparency = 1
	page.Size = UDim2.new(1, 0, 1, 0)
	page.Visible = false
	page.Parent = content

	-- Search bar
	local searchFrame = Instance.new("Frame")
	searchFrame.Name = "SearchFrame"
	searchFrame.Size = UDim2.new(1, 0, 0, 32)
	searchFrame.BackgroundColor3 = Colors.panel
	searchFrame.BorderSizePixel = 0
	searchFrame.Parent = page
	corner(searchFrame, 6); neonStroke(searchFrame, Colors.accent, 1)

	local searchIcon = Instance.new("TextLabel")
	searchIcon.Size = UDim2.new(0, 26, 1, 0)
	searchIcon.BackgroundTransparency = 1
	searchIcon.Font = Enum.Font.GothamBold
	searchIcon.Text = "⌕"
	searchIcon.TextColor3 = Colors.accent2
	searchIcon.TextScaled = true
	searchIcon.Parent = searchFrame
	Theme.registerAccentText(searchIcon)

	local searchBox = Instance.new("TextBox")
	searchBox.Name = "SearchBox"
	searchBox.Size = UDim2.new(1, -64, 1, 0)
	searchBox.Position = UDim2.new(0, 28, 0, 0)
	searchBox.BackgroundTransparency = 1
	searchBox.ClearTextOnFocus = false
	searchBox.Font = Enum.Font.GothamSemibold
	searchBox.PlaceholderText = placeholderText
	searchBox.PlaceholderColor3 = Colors.textDim
	searchBox.TextXAlignment = Enum.TextXAlignment.Left
	searchBox.TextColor3 = Colors.text
	searchBox.TextSize = 14
	searchBox.Text = ""
	searchBox.Parent = searchFrame

	local clearBtn = Instance.new("TextButton")
	clearBtn.Size = UDim2.new(0, 28, 1, 0)
	clearBtn.Position = UDim2.new(1, -28, 0, 0)
	clearBtn.BackgroundTransparency = 1
	clearBtn.Text = "✕"
	clearBtn.Font = Enum.Font.GothamBold
	clearBtn.TextScaled = true
	clearBtn.TextColor3 = Colors.textDim
	clearBtn.AutoButtonColor = false
	clearBtn.Parent = searchFrame
	clearBtn.MouseButton1Click:Connect(function()
		searchBox.Text = ""
	end)

	-- Scroll area
	local scroll = Instance.new("ScrollingFrame")
	scroll.Active = true
	scroll.BackgroundColor3 = Colors.panel
	scroll.BorderSizePixel = 0
	scroll.Position = UDim2.new(0, 0, 0, 32 + 6)
	scroll.Size = UDim2.new(1, 0, 1, -(32 + 6))
	scroll.CanvasSize = UDim2.new(0,0,0,0)
	scroll.ScrollBarThickness = 6
	scroll.ScrollBarImageColor3 = Colors.accent2
	scroll.Parent = page
	corner(scroll, 8); neonStroke(scroll, Colors.accent, 1)
	Theme.registerScrollbar(scroll)
	autoScrollY(scroll)

	return page, scroll, searchBox
end

local itemsPage, itemsScroll, itemsSearch = makeSearchPage("Keywords: e.g. crate red|blue")
local ammoPage, ammoScroll, ammoSearch = makeSearchPage("Keywords: e.g. shell 9mm")
local interactPage, interactScroll, interactSearch = makeSearchPage("Search Interactables...")
local lootPage, lootScroll, lootSearch = makeSearchPage("Search Loot...")

-- Theme tab page (RGB/HSV color picker)
local themePage = Instance.new("Frame")
themePage.BackgroundTransparency = 1
themePage.Size = UDim2.new(1, 0, 1, 0)
themePage.Visible = false
themePage.Parent = content

do
	-- Layout container
	local pane = Instance.new("Frame")
	pane.Size = UDim2.new(1, 0, 1, 0)
	pane.BackgroundTransparency = 1
	pane.Parent = themePage

	-- Preview + reset
	local preview = Instance.new("Frame")
	preview.Size = UDim2.new(0, 64, 0, 64)
	preview.Position = UDim2.new(1, -72, 0, 0)
	preview.BackgroundColor3 = Colors.accent
	preview.BorderSizePixel = 0
	preview.Parent = pane
	corner(preview, 8); neonStroke(preview, Colors.accent, 1)

	local resetBtn = Instance.new("TextButton")
	resetBtn.Size = UDim2.new(0, 80, 0, 28)
	resetBtn.Position = UDim2.new(1, -88, 0, 72)
	resetBtn.BackgroundColor3 = Colors.panel
	resetBtn.Text = "Reset"
	resetBtn.TextColor3 = Colors.text
	resetBtn.Font = Enum.Font.GothamSemibold
	resetBtn.TextSize = 14
	resetBtn.AutoButtonColor = false
	resetBtn.Parent = pane
	corner(resetBtn, 6); neonStroke(resetBtn, Colors.accent, 1)

	-- HSV controls
	local picker = Instance.new("Frame")
	picker.Size = UDim2.new(0, 260, 0, 180)
	picker.Position = UDim2.new(0, 8, 0, 0)
	picker.BackgroundTransparency = 1
	picker.Parent = pane

	-- SV box
	local svBox = Instance.new("Frame")
	svBox.Size = UDim2.new(0, 220, 0, 160)
	svBox.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
	svBox.BorderSizePixel = 0
	svBox.Parent = picker
	corner(svBox, 6); neonStroke(svBox, Colors.accent, 1)

	-- White gradient (left->right)
	local g1 = Instance.new("Frame")
	g1.Size = UDim2.new(1, 0, 1, 0)
	g1.BackgroundTransparency = 1
	g1.Parent = svBox
	local grad1 = Instance.new("UIGradient")
	grad1.Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0, Color3.fromRGB(255,255,255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255,255,255))
	}
	grad1.Transparency = NumberSequence.new{
		NumberSequenceKeypoint.new(0, 0),
		NumberSequenceKeypoint.new(1, 1)
	}
	grad1.Rotation = 0
	grad1.Parent = g1

	-- Black gradient (top->bottom)
	local g2 = Instance.new("Frame")
	g2.Size = UDim2.new(1, 0, 1, 0)
	g2.BackgroundTransparency = 1
	g2.Parent = svBox
	local grad2 = Instance.new("UIGradient")
	grad2.Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0, Color3.fromRGB(0,0,0)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(0,0,0))
	}
	grad2.Transparency = NumberSequence.new{
		NumberSequenceKeypoint.new(0, 1),
		NumberSequenceKeypoint.new(1, 0)
	}
	grad2.Rotation = 90
	grad2.Parent = g2

	-- SV marker
	local svMarker = Instance.new("Frame")
	svMarker.Size = UDim2.new(0, 8, 0, 8)
	svMarker.AnchorPoint = Vector2.new(0.5, 0.5)
	svMarker.Position = UDim2.new(0, 0, 0, 0)
	svMarker.BackgroundColor3 = Colors.text
	svMarker.BorderSizePixel = 0
	svMarker.Parent = svBox
	corner(svMarker, 100)

	-- Hue bar
	local hueBar = Instance.new("Frame")
	hueBar.Size = UDim2.new(0, 20, 0, 160)
	hueBar.Position = UDim2.new(0, 230, 0, 0)
	hueBar.BorderSizePixel = 0
	hueBar.Parent = picker
	corner(hueBar, 6); neonStroke(hueBar, Colors.accent, 1)

	local hg = Instance.new("UIGradient")
	hg.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0/6, Color3.fromRGB(255,0,0)),
		ColorSequenceKeypoint.new(1/6, Color3.fromRGB(255,255,0)),
		ColorSequenceKeypoint.new(2/6, Color3.fromRGB(0,255,0)),
		ColorSequenceKeypoint.new(3/6, Color3.fromRGB(0,255,255)),
		ColorSequenceKeypoint.new(4/6, Color3.fromRGB(0,0,255)),
		ColorSequenceKeypoint.new(5/6, Color3.fromRGB(255,0,255)),
		ColorSequenceKeypoint.new(1,    Color3.fromRGB(255,0,0)),
	})
	hg.Rotation = 90
	hg.Parent = hueBar

	local hueMarker = Instance.new("Frame")
	hueMarker.Size = UDim2.new(1, 0, 0, 2)
	hueMarker.AnchorPoint = Vector2.new(0.5, 0.5)
	hueMarker.Position = UDim2.new(0.5, 0, 0, 0)
	hueMarker.BackgroundColor3 = Colors.text
	hueMarker.BorderSizePixel = 0
	hueMarker.Parent = hueBar

	-- RGB input row
	local rgbRow = Instance.new("Frame")
	rgbRow.Size = UDim2.new(0, 260, 0, 36)
	rgbRow.Position = UDim2.new(0, 8, 0, 180)
	rgbRow.BackgroundTransparency = 1
	rgbRow.Parent = themePage

	local function makeRGBBox(lblText, offsetX)
		local holder = Instance.new("Frame")
		holder.Size = UDim2.new(0, 80, 1, 0)
		holder.Position = UDim2.new(0, offsetX, 0, 0)
		holder.BackgroundColor3 = Colors.panel
		holder.BorderSizePixel = 0
		holder.Parent = rgbRow
		corner(holder, 6); neonStroke(holder, Colors.accent, 1)

		local lbl = Instance.new("TextLabel")
		lbl.Size = UDim2.new(0, 24, 1, 0)
		lbl.BackgroundTransparency = 1
		lbl.Text = lblText
		lbl.TextColor3 = Colors.textDim
		lbl.Font = Enum.Font.GothamBold
		lbl.TextSize = 14
		lbl.Parent = holder

		local box = Instance.new("TextBox")
		box.Size = UDim2.new(1, -26, 1, 0)
		box.Position = UDim2.new(0, 26, 0, 0)
		box.BackgroundTransparency = 1
		box.ClearTextOnFocus = false
		box.Text = "0"
		box.TextColor3 = Colors.text
		box.Font = Enum.Font.GothamSemibold
		box.TextSize = 14
		box.Parent = holder

		return box
	end

	local rBox = makeRGBBox("R", 0)
	local gBox = makeRGBBox("G", 90)
	local bBox = makeRGBBox("B", 180)

	-- HSV state
	local h, s, v = Color3.toHSV(Colors.accent)
	local function setSVFromColor(c3)
		h, s, v = Color3.toHSV(c3)
	end

	-- Update UI visuals from HSV
	local function refreshUI()
		-- base hue for SV box
		local hueColor = Color3.fromHSV(h, 1, 1)
		svBox.BackgroundColor3 = hueColor
		-- markers
		if svBox.AbsoluteSize.X > 0 and svBox.AbsoluteSize.Y > 0 then
			local x = s * svBox.AbsoluteSize.X
			local y = (1 - v) * svBox.AbsoluteSize.Y
			svMarker.Position = UDim2.new(0, x, 0, y)
		end
		if hueBar.AbsoluteSize.Y > 0 then
			local y = h * hueBar.AbsoluteSize.Y
			hueMarker.Position = UDim2.new(0.5, 0, 0, y)
		end
		-- update preview + numeric fields
		local c = Color3.fromHSV(h, s, v)
		preview.BackgroundColor3 = c
		local rr = math.floor(c.R * 255 + 0.5)
		local gg = math.floor(c.G * 255 + 0.5)
		local bb = math.floor(c.B * 255 + 0.5)
		rBox.Text, gBox.Text, bBox.Text = tostring(rr), tostring(gg), tostring(bb)
	end

	-- Apply current HSV to theme
	local function applyTheme()
		local c = Color3.fromHSV(h, s, v)
		Theme.setPrimary(c)
		-- Also update preview stroke to match
		for _, child in ipairs(preview:GetChildren()) do
			if child:IsA("UIStroke") then child.Color = Colors.accent end
		end
	end

	-- Drag helpers
	local draggingSV = false
	local draggingH = false

	local function updateSVFromInput(pos)
		local absPos = svBox.AbsolutePosition
		local absSize = svBox.AbsoluteSize
		local relX = math.clamp((pos.X - absPos.X) / math.max(absSize.X,1), 0, 1)
		local relY = math.clamp((pos.Y - absPos.Y) / math.max(absSize.Y,1), 0, 1)
		s = relX
		v = 1 - relY
		refreshUI()
		applyTheme()
	end

	local function updateHFromInput(pos)
		local absPos = hueBar.AbsolutePosition
		local absSize = hueBar.AbsoluteSize
		local relY = math.clamp((pos.Y - absPos.Y) / math.max(absSize.Y,1), 0, 1)
		h = relY
		refreshUI()
		applyTheme()
	end

	svBox.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			draggingSV = true
			updateSVFromInput(input.Position)
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then draggingSV = false end
			end)
		end
	end)
	hueBar.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			draggingH = true
			updateHFromInput(input.Position)
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then draggingH = false end
			end)
		end
	end)
	UIS.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			if draggingSV then updateSVFromInput(input.Position) end
			if draggingH then updateHFromInput(input.Position) end
		end
	end)

	-- RGB boxes -> update HSV and theme
	local function clamp255(n)
		n = tonumber(n) or 0
		return math.clamp(math.floor(n + 0.5), 0, 255)
	end
	local function rgbBoxesToTheme()
		local r = clamp255(rBox.Text)
		local g = clamp255(gBox.Text)
		local b = clamp255(bBox.Text)
		local c = Color3.fromRGB(r, g, b)
		setSVFromColor(c)
		refreshUI()
		applyTheme()
	end
	rBox.FocusLost:Connect(rgbBoxesToTheme)
	gBox.FocusLost:Connect(rgbBoxesToTheme)
	bBox.FocusLost:Connect(rgbBoxesToTheme)

	resetBtn.MouseButton1Click:Connect(function()
		local c = DefaultColors.accent
		setSVFromColor(c)
		refreshUI()
		Theme.reset()
	end)

	-- Initial sync
	refreshUI()
end

-- List item factory
local function makeListButton(parent, labelText, targetRef)
	local btn = Instance.new("TextButton")
	btn.Name = "ListItem"
	btn.Size = UDim2.new(1, -8, 0, 38)
	btn.Position = UDim2.fromOffset(4, 0)
	btn.BackgroundColor3 = Colors.panelDark
	btn.AutoButtonColor = false
	btn.Text = ""
	btn.Parent = parent
	corner(btn, 6)
	neonStroke(btn, Colors.accent, 1)

	local lbl = Instance.new("TextLabel")
	lbl.BackgroundTransparency = 1
	lbl.Size = UDim2.new(1, -16, 1, 0)
	lbl.Position = UDim2.fromOffset(8, 0)
	lbl.Font = Enum.Font.GothamSemibold
	lbl.TextXAlignment = Enum.TextXAlignment.Left
	lbl.TextColor3 = Colors.text
	lbl.TextSize = 14
	lbl.Text = labelText
	lbl.Parent = btn

	btn.MouseEnter:Connect(function()
		TweenService:Create(btn, TweenInfo.new(0.12), {BackgroundColor3 = Colors.panel}):Play()
	end)
	btn.MouseLeave:Connect(function()
		TweenService:Create(btn, TweenInfo.new(0.12), {BackgroundColor3 = Colors.panelDark}):Play()
	end)

	btn.MouseButton1Click:Connect(function()
		teleportTo(targetRef)
	end)
end

-- Clear only list items
local function clearList(parent)
	for _, c in ipairs(parent:GetChildren()) do
		if c:IsA("TextButton") and c.Name == "ListItem" then
			c:Destroy()
		end
	end
end

-- Populate functions (keyword-aware)
local function populateItems(query)
	clearList(itemsScroll)
	for _, child in ipairs(workspace:GetChildren()) do
		if child:IsA("Model") and child.Parent == workspace then
			if not child:FindFirstChildOfClass("Humanoid") then
				if matchesKeywords(child, query) then
					makeListButton(itemsScroll, child.Name, child)
				end
			end
		end
	end
end

local function populateAmmo(query)
	clearList(ammoScroll)
	local env = workspace:FindFirstChild("Environment")
	if not env then return end
	local inter = env:FindFirstChild("Interactable")
	if not inter then return end
	local ammoRoot = inter:FindFirstChild("Ammo")
	if not ammoRoot then return end

	for _, desc in ipairs(ammoRoot:GetDescendants()) do
		if desc:IsA("MeshPart") then
			if matchesKeywords(desc, query) then
				makeListButton(ammoScroll, desc.Name, desc)
			end
		end
	end
end

local function populateInteractables(query)
	clearList(interactScroll)
	local env = workspace:FindFirstChild("Environment")
	if not env then return end
	local inter = env:FindFirstChild("Interactable")
	if not inter then return end

	for _, desc in ipairs(inter:GetDescendants()) do
		if desc:IsA("Model") and not desc:FindFirstChildOfClass("Humanoid") then
			if matchesKeywords(desc, query) then
				makeListButton(interactScroll, desc.Name, desc)
			end
		end
	end
end

local function populateLoot(query)
	clearList(lootScroll)
	local env = workspace:FindFirstChild("Environment")
	if not env then return end
	local wms = env:FindFirstChild("WorldModelSpawns")
	if not wms then return end
	local lootRoot = wms:FindFirstChild("LootSpawnPoints")
	if not lootRoot then return end

	for _, desc in ipairs(lootRoot:GetDescendants()) do
		if desc:IsA("Model") then
			if matchesKeywords(desc, query) then
				makeListButton(lootScroll, desc.Name, desc)
			end
		end
	end
end

-- Tab switching and live search
local pages = {
	Items = itemsPage,
	Ammo = ammoPage,
	Interactables = interactPage,
	Loot = lootPage,
	Theme = themePage
}
local searches = {
	Items = itemsSearch,
	Ammo = ammoSearch,
	Interactables = interactSearch,
	Loot = lootSearch
}
local populators = {
	Items = populateItems,
	Ammo = populateAmmo,
	Interactables = populateInteractables,
	Loot = populateLoot
}
local tabButtons = {
	Items = itemsTab,
	Ammo = ammoTab,
	Interactables = interactTab,
	Loot = lootTab,
	Theme = themeTab
}

local currentTab = nil
local function showTab(name)
	-- Repopulate data tabs with current search query
	local populate = populators[name]
	if populate then
		local s = searches[name]
		local q = s and s.Text or ""
		local ok, err = pcall(function() populate(q) end)
		if not ok then warn("[CyberScanner] Populate error for "..name..": "..tostring(err)) end
	end

	for tabName, page in pairs(pages) do
		page.Visible = (tabName == name)
	end
	for tabName, btn in pairs(tabButtons) do
		btn.TextColor3 = (tabName == name) and Colors.text or Colors.textDim
		local ul = btn:FindFirstChild("Underline")
		if ul then ul.Visible = (tabName == name) end
	end

	currentTab = name
end

itemsTab.MouseButton1Click:Connect(function() showTab("Items") end)
ammoTab.MouseButton1Click:Connect(function() showTab("Ammo") end)
interactTab.MouseButton1Click:Connect(function() showTab("Interactables") end)
lootTab.MouseButton1Click:Connect(function() showTab("Loot") end)
themeTab.MouseButton1Click:Connect(function() showTab("Theme") end)

-- Live search wiring per tab
local function wireSearch(tabName)
	local box = searches[tabName]
	if not box then return end
	box:GetPropertyChangedSignal("Text"):Connect(function()
		if currentTab == tabName then
			local fn = populators[tabName]
			if fn then fn(box.Text) end
		end
	end)
end
for name,_ in pairs(searches) do wireSearch(name) end

-- Default open tab
showTab("Items")

-- Draggable window (drag by title bar)
do
	local dragging = false
	local dragStart, startPos
	titleBar.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = main.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)
	UIS.InputChanged:Connect(function(input)
		if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
			local delta = input.Position - dragStart
			main.Position = UDim2.new(
				startPos.X.Scale, startPos.X.Offset + delta.X,
				startPos.Y.Scale, startPos.Y.Offset + delta.Y
			)
		end
	end)
end

-- Toggle with K
local isOpen = true
local function setOpen(state)
	isOpen = state
	main.Visible = state
end
UIS.InputBegan:Connect(function(input, gpe)
	if gpe then return end
	if input.KeyCode == Enum.KeyCode.K then
		setOpen(not isOpen)
	end
end)

-- Initial theme application (ensures registered elements get colored)
Theme.apply()

-- Fade in on spawn
main.Visible = false
setOpen(true)
